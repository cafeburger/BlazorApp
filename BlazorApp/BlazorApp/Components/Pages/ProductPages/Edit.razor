@page "/Products/edit"
@inject BlazorApp.Data.BlazorAppContext DB
@using BlazorApp.Data.Entities
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Product</h4>
<hr />
@if (Product is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Product.ProductId" value="@Product.ProductId" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Product.Name" class="form-control" />
                    <ValidationMessage For="() => Product.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Product.Description" class="form-control" />
                    <ValidationMessage For="() => Product.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="price" class="form-label">Price:</label>
                    <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
                    <ValidationMessage For="() => Product.Price" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="stock" class="form-label">Stock:</label>
                    <InputNumber id="stock" @bind-Value="Product.Stock" class="form-control" />
                    <ValidationMessage For="() => Product.Stock" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isactive" class="form-label">IsActive:</label>
                    <InputCheckbox id="isactive" @bind-Value="Product.IsActive" class="form-check-input" />
                    <ValidationMessage For="() => Product.IsActive" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createddate" class="form-label">CreatedDate:</label>
                    <InputDate id="createddate" @bind-Value="Product.CreatedDate" class="form-control" />
                    <ValidationMessage For="() => Product.CreatedDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updateddate" class="form-label">UpdatedDate:</label>
                    <InputDate id="updateddate" @bind-Value="Product.UpdatedDate" class="form-control" />
                    <ValidationMessage For="() => Product.UpdatedDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/products">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ProductId { get; set; }

    [SupplyParameterFromForm]
    public Product? Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Product ??= await DB.Product.FirstOrDefaultAsync(m => m.ProductId == ProductId);

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateProduct()
    {
        DB.Attach(Product!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.ProductId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

    bool ProductExists(int productid)
    {
        return DB.Product.Any(e => e.ProductId == productid);
    }
}
